# Generated by Django 4.2.10 on 2025-04-05 14:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('name_en', models.CharField(max_length=100, null=True, verbose_name='Name')),
                ('name_fr', models.CharField(max_length=100, null=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('description_fr', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='Icon class')),
                ('color', models.CharField(blank=True, max_length=20, verbose_name='Color')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subcategories', to='tickets.category', verbose_name='Parent category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SLA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('response_time_low', models.PositiveIntegerField(default=24, verbose_name='Response time for low priority (hours)')),
                ('response_time_medium', models.PositiveIntegerField(default=12, verbose_name='Response time for medium priority (hours)')),
                ('response_time_high', models.PositiveIntegerField(default=4, verbose_name='Response time for high priority (hours)')),
                ('response_time_critical', models.PositiveIntegerField(default=1, verbose_name='Response time for critical priority (hours)')),
                ('resolution_time_low', models.PositiveIntegerField(default=72, verbose_name='Resolution time for low priority (hours)')),
                ('resolution_time_medium', models.PositiveIntegerField(default=48, verbose_name='Resolution time for medium priority (hours)')),
                ('resolution_time_high', models.PositiveIntegerField(default=24, verbose_name='Resolution time for high priority (hours)')),
                ('resolution_time_critical', models.PositiveIntegerField(default=8, verbose_name='Resolution time for critical priority (hours)')),
                ('business_hours_only', models.BooleanField(default=True, verbose_name='Business hours only')),
            ],
            options={
                'verbose_name': 'SLA',
                'verbose_name_plural': 'SLAs',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Name')),
                ('name_en', models.CharField(max_length=50, null=True, unique=True, verbose_name='Name')),
                ('name_fr', models.CharField(max_length=50, null=True, unique=True, verbose_name='Name')),
                ('color', models.CharField(blank=True, max_length=20, verbose_name='Color')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('description', models.TextField(verbose_name='Description')),
                ('office_door_number', models.CharField(blank=True, help_text='Optional: Enter the office door number for on-site visits', max_length=20, null=True, verbose_name='Office Door Number')),
                ('status', models.CharField(choices=[('new', 'New'), ('open', 'Open'), ('in_progress', 'In Progress'), ('waiting', 'Waiting on Customer'), ('resolved', 'Resolved'), ('closed', 'Closed')], db_index=True, default='new', max_length=20, verbose_name='Status')),
                ('branch', models.CharField(choices=[('siege', 'Headquarters'), ('yaounde', 'Yaound√©'), ('douala', 'Douala'), ('buea', 'Buea'), ('bamenda', 'Bamenda'), ('ngaoundere', 'Ngaoundere'), ('garoua', 'Garoua'), ('maroua', 'Maroua'), ('bafoussam', 'Bafoussam'), ('ebolowa', 'Ebolowa'), ('bertoua', 'Bertoua')], db_index=True, default='siege', max_length=64, verbose_name='Branch')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], db_index=True, default='medium', max_length=20, verbose_name='Priority')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('due_date', models.DateTimeField(blank=True, null=True, verbose_name='Due date')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Resolved at')),
                ('closed_at', models.DateTimeField(blank=True, null=True, verbose_name='Closed at')),
                ('sla_breach', models.BooleanField(default=False, verbose_name='SLA Breach')),
                ('is_public', models.BooleanField(default=False, verbose_name='Public ticket')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL, verbose_name='Assigned to')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tickets', to='tickets.category', verbose_name='Category')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_tickets', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('tags', models.ManyToManyField(blank=True, related_name='tickets', to='tickets.tag')),
            ],
            options={
                'verbose_name': 'Ticket',
                'verbose_name_plural': 'Tickets',
                'ordering': ['-created_at'],
                'permissions': [('assign_ticket', 'Can assign ticket to agent'), ('change_ticket_status', 'Can change ticket status'), ('view_all_tickets', 'Can view all tickets')],
            },
        ),
        migrations.CreateModel(
            name='TicketHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('field_changed', models.CharField(max_length=100, verbose_name='Field changed')),
                ('old_value', models.TextField(blank=True, verbose_name='Old value')),
                ('new_value', models.TextField(blank=True, verbose_name='New value')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='tickets.ticket', verbose_name='Ticket')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ticket_changes', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Ticket History',
                'verbose_name_plural': 'Ticket History',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='TicketAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='ticket_attachments/%Y/%m/', verbose_name='File')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='Uploaded at')),
                ('description', models.CharField(blank=True, max_length=255, verbose_name='Description')),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='tickets.ticket', verbose_name='Ticket')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='uploaded_attachments', to=settings.AUTH_USER_MODEL, verbose_name='Uploaded by')),
            ],
            options={
                'verbose_name': 'Ticket Attachment',
                'verbose_name_plural': 'Ticket Attachments',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['status', 'branch', 'priority'], name='tickets_tic_status_d7ea8b_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['created_at'], name='tickets_tic_created_5dd600_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['due_date'], name='tickets_tic_due_dat_eb91c5_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['assigned_to'], name='tickets_tic_assigne_bcac0e_idx'),
        ),
    ]
