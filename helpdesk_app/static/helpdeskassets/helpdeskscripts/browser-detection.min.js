/**
 * Browser detection and optimization
 * Place in helpdesk_app/static/helpdeskassets/helpdeskscripts/
 */

(function() {
    'use strict';
    
    // Helper function to add classes to HTML element
    function addHtmlClass(className) {
        document.documentElement.classList.add(className);
    }
    
    // Detect IE versions
    function detectIE() {
        var ua = window.navigator.userAgent;
        
        // Test for IE <= 9
        var msie = ua.indexOf('MSIE ');
        if (msie > 0) {
            // IE 10 or older => return version number
            var ieVersion = parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
            addHtmlClass('lt-ie11 lt-ie10');
            if (ieVersion <= 9) {
                addHtmlClass('lt-ie10');
            }
            if (ieVersion <= 8) {
                addHtmlClass('lt-ie9');
            }
            return true;
        }
        
        // Test for IE 11
        var trident = ua.indexOf('Trident/');
        if (trident > 0) {
            addHtmlClass('lt-ie-edge ie11');
            return true;
        }
        
        // Test for Edge (IE 12+)
        var edge = ua.indexOf('Edge/');
        if (edge > 0) {
            addHtmlClass('ms-edge');
            return true;
        }
        
        // Not IE
        return false;
    }
    
    // Detect old Firefox
    function detectOldFirefox() {
        var match = navigator.userAgent.match(/Firefox\/(\d+)\./);
        if (match && parseInt(match[1], 10) < 50) {
            addHtmlClass('firefox-old');
            return true;
        }
        return false;
    }
    
    // Detect old Safari
    function detectOldSafari() {
        var ua = navigator.userAgent;
        var isSafari = /^((?!chrome|android).)*safari/i.test(ua);
        
        if (isSafari) {
            var versionMatch = ua.match(/Version\/(\d+)\.(\d+)/);
            if (versionMatch && parseInt(versionMatch[1], 10) < 10) {
                addHtmlClass('safari-old');
                return true;
            }
        }
        return false;
    }
    
    // Detect slow connection
    function detectSlowConnection() {
        // Use Network Information API if available
        if ('connection' in navigator) {
            var conn = navigator.connection;
            
            if (conn.saveData) {
                addHtmlClass('save-data-on');
            }
            
            if (conn.effectiveType === 'slow-2g' || conn.effectiveType === '2g') {
                addHtmlClass('slow-connection');
                return true;
            }
            
            // Add connection type as class for potential specific optimizations
            addHtmlClass('connection-' + conn.effectiveType.replace('-', ''));
        }
        
        return false;
    }
    
    // Check for offline status
    function checkOfflineStatus() {
        if (!navigator.onLine) {
            addHtmlClass('is-offline');
            
            // Show offline indicators
            var indicators = document.querySelectorAll('.offline-indicator');
            for (var i = 0; i < indicators.length; i++) {
                indicators[i].style.display = 'block';
            }
            
            return true;
        }
        return false;
    }
    
    // Apply optimizations for slow devices/connections
    function applyOptimizations() {
        var isOldBrowser = detectIE() || detectOldFirefox() || detectOldSafari();
        var isSlowConnection = detectSlowConnection();
        var isOffline = checkOfflineStatus();
        
        // Add a general class for older browsers
        if (isOldBrowser) {
            addHtmlClass('old-browser');
        }
        
        // Listen for online/offline events
        window.addEventListener('online', function() {
            document.documentElement.classList.remove('is-offline');
            var indicators = document.querySelectorAll('.offline-indicator');
            for (var i = 0; i < indicators.length; i++) {
                indicators[i].style.display = 'none';
            }
        });
        
        window.addEventListener('offline', function() {
            document.documentElement.classList.add('is-offline');
            var indicators = document.querySelectorAll('.offline-indicator');
            for (var i = 0; i < indicators.length; i++) {
                indicators[i].style.display = 'block';
            }
        });
        
        // Handle image lazy loading for older browsers
        if (isOldBrowser || isSlowConnection) {
            // Simplified lazy loading for old browsers
            if (!('loading' in HTMLImageElement.prototype)) {
                var lazyImages = document.querySelectorAll('img[loading="lazy"]');
                for (var i = 0; i < lazyImages.length; i++) {
                    lazyImages[i].setAttribute('data-src', lazyImages[i].getAttribute('src'));
                    lazyImages[i].removeAttribute('src');
                }
                
                function lazyLoad() {
                    var lazyImages = document.querySelectorAll('img[data-src]');
                    for (var i = 0; i < lazyImages.length; i++) {
                        var img = lazyImages[i];
                        var rect = img.getBoundingClientRect();
                        if (rect.top <= window.innerHeight && rect.bottom >= 0) {
                            img.src = img.getAttribute('data-src');
                            img.removeAttribute('data-src');
                        }
                    }
                }
                
                // Initial load and scroll event
                window.addEventListener('load', lazyLoad);
                window.addEventListener('scroll', lazyLoad);
            }
        }
    }
    
    // Initialize on DOMContentLoaded
    document.addEventListener('DOMContentLoaded', applyOptimizations);
})();